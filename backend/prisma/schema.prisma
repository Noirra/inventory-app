generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ItemStatus {
  UNUSED
  USED
  BROKEN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model User {
  id           String            @id @default(uuid())
  name         String
  email        String            @unique
  password     String
  roles        UserRole[]
  userItems    UserItem[]
  itemRequests ItemRequest[]
  approvals    RequestApproved[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  users     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id                String          @id @default(uuid())
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  areaId            String
  area              Area            @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name              String
  price             Int
  photo             String
  receipt           String
  status            ItemStatus      @default(UNUSED)
  code              String          @unique
  examinationPeriodDate String?
  examinationPeriodMonth Int?
  components        Component[]
  userItems         UserItem[]
  itemGroups        ItemGroup[]
  repairRequests    RepairRequest[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model GroupCode {
  id        String   @id @default(uuid())
  name      String   @unique
  itemGroups ItemGroup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemGroup {
  id        String   @id @default(uuid())
  groupId   String
  group     GroupCode @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id        String   @id @default(uuid())
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  photo     String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemRequest {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name          String
  desc          String
  priceRange    String
  referenceLink String            @db.Text
  code          String            @unique
  status        Status            @default(PENDING)
  approvals     RequestApproved[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model RequestApproved {
  id        String      @id @default(uuid())
  requestId String
  request   ItemRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model RepairRequest {
  id             String   @id @default(uuid())
  itemId         String
  item           Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  repairReason   String
  estimatedPrice String
  status         Status   @default(PENDING)
  code           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}